# WARNING: Please, DO NOT edit this file! It is maintained in the Repository Template (https://github.com/nhs-england-tools/repository-template). Raise a PR instead.

include scripts/docker/docker.mk
include scripts/tests/test.mk
-include scripts/terraform/terraform.mk

runner-act: # Run GitHub Actions locally - mandatory: workflow=[workflow file name], job=[job name]
	source ./scripts/docker/docker.lib.sh
	act $(shell [[ "${VERBOSE}" =~ ^(true|yes|y|on|1|TRUE|YES|Y|ON)$$ ]] && echo --verbose) \
		--container-architecture linux/amd64 \
		--platform ubuntu-latest=$$(name="ghcr.io/nhs-england-tools/github-runner-image" docker-get-image-version-and-pull) \
		--container-options "--privileged" \
		--bind \
		--pull=false \
		--reuse \
		--rm \
		--defaultbranch main \
		--workflows .github/workflows/${workflow}.yaml \
		--job ${job}

version-create-effective-file: # Create effective version file - optional: dir=[path to the VERSION file to use, default is '.'], BUILD_DATETIME=[build date and time in the '%Y-%m-%dT%H:%M:%S%z' format generated by the CI/CD pipeline, default is current date and time]
	source scripts/docker/docker.lib.sh
	version-create-effective-file

shellscript-lint-all: # Lint all shell scripts in this project, do not fail on error, just print the error messages
	for file in $$(find . -type f -name "*.sh"); do
		file=$${file} scripts/shellscript-linter.sh ||:
	done

nodejs-install: #@Install Install Node.js
	make _install-dependency name="nodejs"
	make _install-dependency name="yarn" version=latest

python-install: #@Install Install Python
	make _install-dependency name="python"
	make _install-dependency name="poetry" version=latest

githooks-install: #@Configure Install git hooks configured in this repository
	make _install-dependency name="pre-commit"
	pre-commit install \
		--config scripts/config/pre-commit.yaml \
		--install-hooks

githooks-run: #@Operations Run git hooks configured in this repository
	pre-commit run \
		--config scripts/config/pre-commit.yaml \
		--all-files

asdf-install: #@Install Install asdf from https://asdf-vm.com/
	if [ -d "${HOME}/.asdf" ]; then
		( cd "${HOME}/.asdf"; git pull )
	else
		git clone --depth=1 https://github.com/asdf-vm/asdf.git "${HOME}/.asdf" ||:
	fi
	asdf plugin update --all

_install-dependency: # Install asdf dependency - mandatory: name=[listed in the '.tool-versions' file]; optional: version=[if not listed]
	asdf plugin add ${name} ||:
	asdf install ${name} $(or ${version},)

clean:: #@Operations Remove all generated and temporary files
	rm -rf \
		.scannerwork \
		*cloc-report*.json \
		*sbom*report*.json \
		*vulnerabilities*report*.json \
		*report*json.zip \
		docs/diagrams/.*.bkp \
		docs/diagrams/.*.dtmp \
		.version

config:: #@Configure Configure development environment
	make \
		asdf-install \
		githooks-install

help: #@Help List Makefile targets
	printf "\n"
	perl -e '$(HELP_SCRIPT)' $(MAKEFILE_LIST)
	printf "\nUsage: \033[0;33m[arg1=val1] [arg2=val2]\033[0m make \033[0;36m<command>\033[0m\n\n"
	#awk 'BEGIN {FS = ":.*?# "} /^[ a-zA-Z0-9-]+:.*? # / {printf "\033[36m%-41s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST) | sort

list-variables: #@Operations List all the variables available to make
	$(foreach v, $(sort $(.VARIABLES)),
		$(if $(filter-out default automatic, $(origin $v)),
			$(if $(and $(patsubst %_PASSWORD,,$v), $(patsubst %_PASS,,$v), $(patsubst %_KEY,,$v), $(patsubst %_SECRET,,$v)),
				$(info $v=$($v) ($(value $v)) [$(flavor $v),$(origin $v)]),
				$(info $v=****** (******) [$(flavor $v),$(origin $v)])
			)
		)
	)

.DEFAULT_GOAL := help
.EXPORT_ALL_VARIABLES:
.NOTPARALLEL:
.ONESHELL:
.PHONY: * # Please, do not change this line! The alternative usage of it introduces unnecessary complexity and is considered an anti-pattern.
MAKEFLAGS := --no-print-director
SHELL := /bin/bash
ifeq (true, $(shell [[ "${VERBOSE}" =~ ^(true|yes|y|on|1|TRUE|YES|Y|ON)$$ ]] && echo true))
	.SHELLFLAGS := -cex
else
	.SHELLFLAGS := -ce
endif
HELP_SCRIPT = \
	%help; \
	while(<>){ \
		push @{$$help{$$2//'Others'}}, [$$1,$$3] \
		if /^([\w-_]+)\s*:.*\#(?:@(\w+))?\s(.*)$$/; \
	} \
	for my $$category (sort keys %help) { \
		print "$$category:\n"; \
		for my $$item (sort { $$a->[0] cmp $$b->[0] } @{$$help{$$category}}) { \
			printf "  \033[36m%-38s\033[0m%s\n", $$item->[0], $$item->[1]; \
		} \
		print "\n"; \
	}

${VERBOSE}.SILENT: \
	_install-dependency \
	asdf-install \
	clean \
	config \
	githooks-install \
	githooks-run \
	help \
	list-variables \
	nodejs-install \
	python-install \
	runner-act \
	shellscript-lint-all \
	version-create-effective-file \
